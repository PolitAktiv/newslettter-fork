package net.zylk.liferay.portal.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import net.zylk.liferay.portal.model.MailingLang;
import net.zylk.liferay.portal.model.MailingLangModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the MailingLang service. Represents a row in the &quot;ZN_MailingLang&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link net.zylk.liferay.portal.model.MailingLangModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MailingLangImpl}.
 * </p>
 *
 * @author zylk.net
 * @see MailingLangImpl
 * @see net.zylk.liferay.portal.model.MailingLang
 * @see net.zylk.liferay.portal.model.MailingLangModel
 * @generated
 */
public class MailingLangModelImpl extends BaseModelImpl<MailingLang>
    implements MailingLangModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a mailing lang model instance should use the {@link net.zylk.liferay.portal.model.MailingLang} interface instead.
     */
    public static final String TABLE_NAME = "ZN_MailingLang";
    public static final Object[][] TABLE_COLUMNS = {
            { "mailingLangId", Types.BIGINT },
            { "mailingId", Types.BIGINT },
            { "languageId", Types.VARCHAR },
            { "emailSubjectPre", Types.VARCHAR },
            { "emailBodyPre", Types.CLOB }
        };
    public static final String TABLE_SQL_CREATE = "create table ZN_MailingLang (mailingLangId LONG not null primary key,mailingId LONG,languageId VARCHAR(75) null,emailSubjectPre VARCHAR(255) null,emailBodyPre TEXT null)";
    public static final String TABLE_SQL_DROP = "drop table ZN_MailingLang";
    public static final String ORDER_BY_JPQL = " ORDER BY mailingLang.mailingLangId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY ZN_MailingLang.mailingLangId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.net.zylk.liferay.portal.model.MailingLang"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.net.zylk.liferay.portal.model.MailingLang"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.net.zylk.liferay.portal.model.MailingLang"),
            true);
    public static long LANGUAGEID_COLUMN_BITMASK = 1L;
    public static long MAILINGID_COLUMN_BITMASK = 2L;
    public static long MAILINGLANGID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.net.zylk.liferay.portal.model.MailingLang"));
    private static ClassLoader _classLoader = MailingLang.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            MailingLang.class
        };
    private long _mailingLangId;
    private long _mailingId;
    private long _originalMailingId;
    private boolean _setOriginalMailingId;
    private String _languageId;
    private String _originalLanguageId;
    private String _emailSubjectPre;
    private String _emailBodyPre;
    private long _columnBitmask;
    private MailingLang _escapedModel;

    public MailingLangModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _mailingLangId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setMailingLangId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _mailingLangId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return MailingLang.class;
    }

    @Override
    public String getModelClassName() {
        return MailingLang.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("mailingLangId", getMailingLangId());
        attributes.put("mailingId", getMailingId());
        attributes.put("languageId", getLanguageId());
        attributes.put("emailSubjectPre", getEmailSubjectPre());
        attributes.put("emailBodyPre", getEmailBodyPre());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long mailingLangId = (Long) attributes.get("mailingLangId");

        if (mailingLangId != null) {
            setMailingLangId(mailingLangId);
        }

        Long mailingId = (Long) attributes.get("mailingId");

        if (mailingId != null) {
            setMailingId(mailingId);
        }

        String languageId = (String) attributes.get("languageId");

        if (languageId != null) {
            setLanguageId(languageId);
        }

        String emailSubjectPre = (String) attributes.get("emailSubjectPre");

        if (emailSubjectPre != null) {
            setEmailSubjectPre(emailSubjectPre);
        }

        String emailBodyPre = (String) attributes.get("emailBodyPre");

        if (emailBodyPre != null) {
            setEmailBodyPre(emailBodyPre);
        }
    }

    @Override
    public long getMailingLangId() {
        return _mailingLangId;
    }

    @Override
    public void setMailingLangId(long mailingLangId) {
        _mailingLangId = mailingLangId;
    }

    @Override
    public long getMailingId() {
        return _mailingId;
    }

    @Override
    public void setMailingId(long mailingId) {
        _columnBitmask |= MAILINGID_COLUMN_BITMASK;

        if (!_setOriginalMailingId) {
            _setOriginalMailingId = true;

            _originalMailingId = _mailingId;
        }

        _mailingId = mailingId;
    }

    public long getOriginalMailingId() {
        return _originalMailingId;
    }

    @Override
    public String getLanguageId() {
        if (_languageId == null) {
            return StringPool.BLANK;
        } else {
            return _languageId;
        }
    }

    @Override
    public void setLanguageId(String languageId) {
        _columnBitmask |= LANGUAGEID_COLUMN_BITMASK;

        if (_originalLanguageId == null) {
            _originalLanguageId = _languageId;
        }

        _languageId = languageId;
    }

    public String getOriginalLanguageId() {
        return GetterUtil.getString(_originalLanguageId);
    }

    @Override
    public String getEmailSubjectPre() {
        if (_emailSubjectPre == null) {
            return StringPool.BLANK;
        } else {
            return _emailSubjectPre;
        }
    }

    @Override
    public void setEmailSubjectPre(String emailSubjectPre) {
        _emailSubjectPre = emailSubjectPre;
    }

    @Override
    public String getEmailBodyPre() {
        if (_emailBodyPre == null) {
            return StringPool.BLANK;
        } else {
            return _emailBodyPre;
        }
    }

    @Override
    public void setEmailBodyPre(String emailBodyPre) {
        _emailBodyPre = emailBodyPre;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            MailingLang.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public MailingLang toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (MailingLang) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        MailingLangImpl mailingLangImpl = new MailingLangImpl();

        mailingLangImpl.setMailingLangId(getMailingLangId());
        mailingLangImpl.setMailingId(getMailingId());
        mailingLangImpl.setLanguageId(getLanguageId());
        mailingLangImpl.setEmailSubjectPre(getEmailSubjectPre());
        mailingLangImpl.setEmailBodyPre(getEmailBodyPre());

        mailingLangImpl.resetOriginalValues();

        return mailingLangImpl;
    }

    @Override
    public int compareTo(MailingLang mailingLang) {
        long primaryKey = mailingLang.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof MailingLang)) {
            return false;
        }

        MailingLang mailingLang = (MailingLang) obj;

        long primaryKey = mailingLang.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        MailingLangModelImpl mailingLangModelImpl = this;

        mailingLangModelImpl._originalMailingId = mailingLangModelImpl._mailingId;

        mailingLangModelImpl._setOriginalMailingId = false;

        mailingLangModelImpl._originalLanguageId = mailingLangModelImpl._languageId;

        mailingLangModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<MailingLang> toCacheModel() {
        MailingLangCacheModel mailingLangCacheModel = new MailingLangCacheModel();

        mailingLangCacheModel.mailingLangId = getMailingLangId();

        mailingLangCacheModel.mailingId = getMailingId();

        mailingLangCacheModel.languageId = getLanguageId();

        String languageId = mailingLangCacheModel.languageId;

        if ((languageId != null) && (languageId.length() == 0)) {
            mailingLangCacheModel.languageId = null;
        }

        mailingLangCacheModel.emailSubjectPre = getEmailSubjectPre();

        String emailSubjectPre = mailingLangCacheModel.emailSubjectPre;

        if ((emailSubjectPre != null) && (emailSubjectPre.length() == 0)) {
            mailingLangCacheModel.emailSubjectPre = null;
        }

        mailingLangCacheModel.emailBodyPre = getEmailBodyPre();

        String emailBodyPre = mailingLangCacheModel.emailBodyPre;

        if ((emailBodyPre != null) && (emailBodyPre.length() == 0)) {
            mailingLangCacheModel.emailBodyPre = null;
        }

        return mailingLangCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{mailingLangId=");
        sb.append(getMailingLangId());
        sb.append(", mailingId=");
        sb.append(getMailingId());
        sb.append(", languageId=");
        sb.append(getLanguageId());
        sb.append(", emailSubjectPre=");
        sb.append(getEmailSubjectPre());
        sb.append(", emailBodyPre=");
        sb.append(getEmailBodyPre());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append("net.zylk.liferay.portal.model.MailingLang");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>mailingLangId</column-name><column-value><![CDATA[");
        sb.append(getMailingLangId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>mailingId</column-name><column-value><![CDATA[");
        sb.append(getMailingId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>languageId</column-name><column-value><![CDATA[");
        sb.append(getLanguageId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>emailSubjectPre</column-name><column-value><![CDATA[");
        sb.append(getEmailSubjectPre());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>emailBodyPre</column-name><column-value><![CDATA[");
        sb.append(getEmailBodyPre());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
