package net.zylk.liferay.portal.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import net.zylk.liferay.portal.model.Mailing;
import net.zylk.liferay.portal.model.MailingModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Mailing service. Represents a row in the &quot;ZN_Mailing&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link net.zylk.liferay.portal.model.MailingModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MailingImpl}.
 * </p>
 *
 * @author zylk.net
 * @see MailingImpl
 * @see net.zylk.liferay.portal.model.Mailing
 * @see net.zylk.liferay.portal.model.MailingModel
 * @generated
 */
public class MailingModelImpl extends BaseModelImpl<Mailing>
    implements MailingModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a mailing model instance should use the {@link net.zylk.liferay.portal.model.Mailing} interface instead.
     */
    public static final String TABLE_NAME = "ZN_Mailing";
    public static final Object[][] TABLE_COLUMNS = {
            { "mailingId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "newsletterId", Types.BIGINT },
            { "newsletterName", Types.VARCHAR },
            { "emailFromName", Types.VARCHAR },
            { "emailFromAddress", Types.VARCHAR },
            { "startDate", Types.TIMESTAMP },
            { "fromDate", Types.TIMESTAMP },
            { "emailCount", Types.INTEGER },
            { "status", Types.INTEGER },
            { "isScheduled", Types.BOOLEAN }
        };
    public static final String TABLE_SQL_CREATE = "create table ZN_Mailing (mailingId LONG not null primary key,companyId LONG,groupId LONG,newsletterId LONG,newsletterName VARCHAR(255) null,emailFromName VARCHAR(75) null,emailFromAddress VARCHAR(75) null,startDate DATE null,fromDate DATE null,emailCount INTEGER,status INTEGER,isScheduled BOOLEAN)";
    public static final String TABLE_SQL_DROP = "drop table ZN_Mailing";
    public static final String ORDER_BY_JPQL = " ORDER BY mailing.startDate DESC";
    public static final String ORDER_BY_SQL = " ORDER BY ZN_Mailing.startDate DESC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.net.zylk.liferay.portal.model.Mailing"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.net.zylk.liferay.portal.model.Mailing"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.net.zylk.liferay.portal.model.Mailing"),
            true);
    public static long COMPANYID_COLUMN_BITMASK = 1L;
    public static long GROUPID_COLUMN_BITMASK = 2L;
    public static long NEWSLETTERID_COLUMN_BITMASK = 4L;
    public static long STARTDATE_COLUMN_BITMASK = 8L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.net.zylk.liferay.portal.model.Mailing"));
    private static ClassLoader _classLoader = Mailing.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Mailing.class
        };
    private long _mailingId;
    private long _companyId;
    private long _originalCompanyId;
    private boolean _setOriginalCompanyId;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private long _newsletterId;
    private long _originalNewsletterId;
    private boolean _setOriginalNewsletterId;
    private String _newsletterName;
    private String _emailFromName;
    private String _emailFromAddress;
    private Date _startDate;
    private Date _fromDate;
    private int _emailCount;
    private int _status;
    private boolean _isScheduled;
    private long _columnBitmask;
    private Mailing _escapedModel;

    public MailingModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _mailingId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setMailingId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _mailingId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Mailing.class;
    }

    @Override
    public String getModelClassName() {
        return Mailing.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("mailingId", getMailingId());
        attributes.put("companyId", getCompanyId());
        attributes.put("groupId", getGroupId());
        attributes.put("newsletterId", getNewsletterId());
        attributes.put("newsletterName", getNewsletterName());
        attributes.put("emailFromName", getEmailFromName());
        attributes.put("emailFromAddress", getEmailFromAddress());
        attributes.put("startDate", getStartDate());
        attributes.put("fromDate", getFromDate());
        attributes.put("emailCount", getEmailCount());
        attributes.put("status", getStatus());
        attributes.put("isScheduled", getIsScheduled());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long mailingId = (Long) attributes.get("mailingId");

        if (mailingId != null) {
            setMailingId(mailingId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long newsletterId = (Long) attributes.get("newsletterId");

        if (newsletterId != null) {
            setNewsletterId(newsletterId);
        }

        String newsletterName = (String) attributes.get("newsletterName");

        if (newsletterName != null) {
            setNewsletterName(newsletterName);
        }

        String emailFromName = (String) attributes.get("emailFromName");

        if (emailFromName != null) {
            setEmailFromName(emailFromName);
        }

        String emailFromAddress = (String) attributes.get("emailFromAddress");

        if (emailFromAddress != null) {
            setEmailFromAddress(emailFromAddress);
        }

        Date startDate = (Date) attributes.get("startDate");

        if (startDate != null) {
            setStartDate(startDate);
        }

        Date fromDate = (Date) attributes.get("fromDate");

        if (fromDate != null) {
            setFromDate(fromDate);
        }

        Integer emailCount = (Integer) attributes.get("emailCount");

        if (emailCount != null) {
            setEmailCount(emailCount);
        }

        Integer status = (Integer) attributes.get("status");

        if (status != null) {
            setStatus(status);
        }

        Boolean isScheduled = (Boolean) attributes.get("isScheduled");

        if (isScheduled != null) {
            setIsScheduled(isScheduled);
        }
    }

    @Override
    public long getMailingId() {
        return _mailingId;
    }

    @Override
    public void setMailingId(long mailingId) {
        _mailingId = mailingId;
    }

    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _columnBitmask |= COMPANYID_COLUMN_BITMASK;

        if (!_setOriginalCompanyId) {
            _setOriginalCompanyId = true;

            _originalCompanyId = _companyId;
        }

        _companyId = companyId;
    }

    public long getOriginalCompanyId() {
        return _originalCompanyId;
    }

    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    @Override
    public long getNewsletterId() {
        return _newsletterId;
    }

    @Override
    public void setNewsletterId(long newsletterId) {
        _columnBitmask |= NEWSLETTERID_COLUMN_BITMASK;

        if (!_setOriginalNewsletterId) {
            _setOriginalNewsletterId = true;

            _originalNewsletterId = _newsletterId;
        }

        _newsletterId = newsletterId;
    }

    public long getOriginalNewsletterId() {
        return _originalNewsletterId;
    }

    @Override
    public String getNewsletterName() {
        if (_newsletterName == null) {
            return StringPool.BLANK;
        } else {
            return _newsletterName;
        }
    }

    @Override
    public void setNewsletterName(String newsletterName) {
        _newsletterName = newsletterName;
    }

    @Override
    public String getEmailFromName() {
        if (_emailFromName == null) {
            return StringPool.BLANK;
        } else {
            return _emailFromName;
        }
    }

    @Override
    public void setEmailFromName(String emailFromName) {
        _emailFromName = emailFromName;
    }

    @Override
    public String getEmailFromAddress() {
        if (_emailFromAddress == null) {
            return StringPool.BLANK;
        } else {
            return _emailFromAddress;
        }
    }

    @Override
    public void setEmailFromAddress(String emailFromAddress) {
        _emailFromAddress = emailFromAddress;
    }

    @Override
    public Date getStartDate() {
        return _startDate;
    }

    @Override
    public void setStartDate(Date startDate) {
        _columnBitmask = -1L;

        _startDate = startDate;
    }

    @Override
    public Date getFromDate() {
        return _fromDate;
    }

    @Override
    public void setFromDate(Date fromDate) {
        _fromDate = fromDate;
    }

    @Override
    public int getEmailCount() {
        return _emailCount;
    }

    @Override
    public void setEmailCount(int emailCount) {
        _emailCount = emailCount;
    }

    @Override
    public int getStatus() {
        return _status;
    }

    @Override
    public void setStatus(int status) {
        _status = status;
    }

    @Override
    public boolean getIsScheduled() {
        return _isScheduled;
    }

    @Override
    public boolean isIsScheduled() {
        return _isScheduled;
    }

    @Override
    public void setIsScheduled(boolean isScheduled) {
        _isScheduled = isScheduled;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            Mailing.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Mailing toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Mailing) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        MailingImpl mailingImpl = new MailingImpl();

        mailingImpl.setMailingId(getMailingId());
        mailingImpl.setCompanyId(getCompanyId());
        mailingImpl.setGroupId(getGroupId());
        mailingImpl.setNewsletterId(getNewsletterId());
        mailingImpl.setNewsletterName(getNewsletterName());
        mailingImpl.setEmailFromName(getEmailFromName());
        mailingImpl.setEmailFromAddress(getEmailFromAddress());
        mailingImpl.setStartDate(getStartDate());
        mailingImpl.setFromDate(getFromDate());
        mailingImpl.setEmailCount(getEmailCount());
        mailingImpl.setStatus(getStatus());
        mailingImpl.setIsScheduled(getIsScheduled());

        mailingImpl.resetOriginalValues();

        return mailingImpl;
    }

    @Override
    public int compareTo(Mailing mailing) {
        int value = 0;

        value = DateUtil.compareTo(getStartDate(), mailing.getStartDate());

        value = value * -1;

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Mailing)) {
            return false;
        }

        Mailing mailing = (Mailing) obj;

        long primaryKey = mailing.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        MailingModelImpl mailingModelImpl = this;

        mailingModelImpl._originalCompanyId = mailingModelImpl._companyId;

        mailingModelImpl._setOriginalCompanyId = false;

        mailingModelImpl._originalGroupId = mailingModelImpl._groupId;

        mailingModelImpl._setOriginalGroupId = false;

        mailingModelImpl._originalNewsletterId = mailingModelImpl._newsletterId;

        mailingModelImpl._setOriginalNewsletterId = false;

        mailingModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Mailing> toCacheModel() {
        MailingCacheModel mailingCacheModel = new MailingCacheModel();

        mailingCacheModel.mailingId = getMailingId();

        mailingCacheModel.companyId = getCompanyId();

        mailingCacheModel.groupId = getGroupId();

        mailingCacheModel.newsletterId = getNewsletterId();

        mailingCacheModel.newsletterName = getNewsletterName();

        String newsletterName = mailingCacheModel.newsletterName;

        if ((newsletterName != null) && (newsletterName.length() == 0)) {
            mailingCacheModel.newsletterName = null;
        }

        mailingCacheModel.emailFromName = getEmailFromName();

        String emailFromName = mailingCacheModel.emailFromName;

        if ((emailFromName != null) && (emailFromName.length() == 0)) {
            mailingCacheModel.emailFromName = null;
        }

        mailingCacheModel.emailFromAddress = getEmailFromAddress();

        String emailFromAddress = mailingCacheModel.emailFromAddress;

        if ((emailFromAddress != null) && (emailFromAddress.length() == 0)) {
            mailingCacheModel.emailFromAddress = null;
        }

        Date startDate = getStartDate();

        if (startDate != null) {
            mailingCacheModel.startDate = startDate.getTime();
        } else {
            mailingCacheModel.startDate = Long.MIN_VALUE;
        }

        Date fromDate = getFromDate();

        if (fromDate != null) {
            mailingCacheModel.fromDate = fromDate.getTime();
        } else {
            mailingCacheModel.fromDate = Long.MIN_VALUE;
        }

        mailingCacheModel.emailCount = getEmailCount();

        mailingCacheModel.status = getStatus();

        mailingCacheModel.isScheduled = getIsScheduled();

        return mailingCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(25);

        sb.append("{mailingId=");
        sb.append(getMailingId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", newsletterId=");
        sb.append(getNewsletterId());
        sb.append(", newsletterName=");
        sb.append(getNewsletterName());
        sb.append(", emailFromName=");
        sb.append(getEmailFromName());
        sb.append(", emailFromAddress=");
        sb.append(getEmailFromAddress());
        sb.append(", startDate=");
        sb.append(getStartDate());
        sb.append(", fromDate=");
        sb.append(getFromDate());
        sb.append(", emailCount=");
        sb.append(getEmailCount());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append(", isScheduled=");
        sb.append(getIsScheduled());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(40);

        sb.append("<model><model-name>");
        sb.append("net.zylk.liferay.portal.model.Mailing");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>mailingId</column-name><column-value><![CDATA[");
        sb.append(getMailingId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>newsletterId</column-name><column-value><![CDATA[");
        sb.append(getNewsletterId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>newsletterName</column-name><column-value><![CDATA[");
        sb.append(getNewsletterName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>emailFromName</column-name><column-value><![CDATA[");
        sb.append(getEmailFromName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>emailFromAddress</column-name><column-value><![CDATA[");
        sb.append(getEmailFromAddress());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>startDate</column-name><column-value><![CDATA[");
        sb.append(getStartDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>fromDate</column-name><column-value><![CDATA[");
        sb.append(getFromDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>emailCount</column-name><column-value><![CDATA[");
        sb.append(getEmailCount());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>isScheduled</column-name><column-value><![CDATA[");
        sb.append(getIsScheduled());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
