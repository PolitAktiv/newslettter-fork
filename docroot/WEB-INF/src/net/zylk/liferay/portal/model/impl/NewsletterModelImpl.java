package net.zylk.liferay.portal.model.impl;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import net.zylk.liferay.portal.model.Newsletter;
import net.zylk.liferay.portal.model.NewsletterModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the Newsletter service. Represents a row in the &quot;ZN_Newsletter&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link net.zylk.liferay.portal.model.NewsletterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NewsletterImpl}.
 * </p>
 *
 * @author zylk.net
 * @see NewsletterImpl
 * @see net.zylk.liferay.portal.model.Newsletter
 * @see net.zylk.liferay.portal.model.NewsletterModel
 * @generated
 */
public class NewsletterModelImpl extends BaseModelImpl<Newsletter>
    implements NewsletterModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a newsletter model instance should use the {@link net.zylk.liferay.portal.model.Newsletter} interface instead.
     */
    public static final String TABLE_NAME = "ZN_Newsletter";
    public static final Object[][] TABLE_COLUMNS = {
            { "newsletterId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "name", Types.VARCHAR },
            { "description", Types.VARCHAR },
            { "categoryId", Types.BIGINT },
            { "subject", Types.VARCHAR },
            { "articleId", Types.VARCHAR },
            { "articleGroupId", Types.BIGINT },
            { "schedulerActive", Types.BOOLEAN },
            { "schedulerType", Types.INTEGER },
            { "schedulerDate", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table ZN_Newsletter (newsletterId LONG not null primary key,companyId LONG,groupId LONG,createDate DATE null,modifiedDate DATE null,name VARCHAR(255) null,description STRING null,categoryId LONG,subject STRING null,articleId VARCHAR(75) null,articleGroupId LONG,schedulerActive BOOLEAN,schedulerType INTEGER,schedulerDate DATE null)";
    public static final String TABLE_SQL_DROP = "drop table ZN_Newsletter";
    public static final String ORDER_BY_JPQL = " ORDER BY newsletter.newsletterId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY ZN_Newsletter.newsletterId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.net.zylk.liferay.portal.model.Newsletter"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.net.zylk.liferay.portal.model.Newsletter"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.net.zylk.liferay.portal.model.Newsletter"),
            true);
    public static long COMPANYID_COLUMN_BITMASK = 1L;
    public static long GROUPID_COLUMN_BITMASK = 2L;
    public static long NEWSLETTERID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.net.zylk.liferay.portal.model.Newsletter"));
    private static ClassLoader _classLoader = Newsletter.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Newsletter.class
        };
    private long _newsletterId;
    private long _companyId;
    private long _originalCompanyId;
    private boolean _setOriginalCompanyId;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private Date _createDate;
    private Date _modifiedDate;
    private String _name;
    private String _description;
    private long _categoryId;
    private String _subject;
    private String _subjectCurrentLanguageId;
    private String _articleId;
    private long _articleGroupId;
    private boolean _schedulerActive;
    private int _schedulerType;
    private Date _schedulerDate;
    private long _columnBitmask;
    private Newsletter _escapedModel;

    public NewsletterModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _newsletterId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setNewsletterId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _newsletterId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Newsletter.class;
    }

    @Override
    public String getModelClassName() {
        return Newsletter.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("newsletterId", getNewsletterId());
        attributes.put("companyId", getCompanyId());
        attributes.put("groupId", getGroupId());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("name", getName());
        attributes.put("description", getDescription());
        attributes.put("categoryId", getCategoryId());
        attributes.put("subject", getSubject());
        attributes.put("articleId", getArticleId());
        attributes.put("articleGroupId", getArticleGroupId());
        attributes.put("schedulerActive", getSchedulerActive());
        attributes.put("schedulerType", getSchedulerType());
        attributes.put("schedulerDate", getSchedulerDate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long newsletterId = (Long) attributes.get("newsletterId");

        if (newsletterId != null) {
            setNewsletterId(newsletterId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }

        Long categoryId = (Long) attributes.get("categoryId");

        if (categoryId != null) {
            setCategoryId(categoryId);
        }

        String subject = (String) attributes.get("subject");

        if (subject != null) {
            setSubject(subject);
        }

        String articleId = (String) attributes.get("articleId");

        if (articleId != null) {
            setArticleId(articleId);
        }

        Long articleGroupId = (Long) attributes.get("articleGroupId");

        if (articleGroupId != null) {
            setArticleGroupId(articleGroupId);
        }

        Boolean schedulerActive = (Boolean) attributes.get("schedulerActive");

        if (schedulerActive != null) {
            setSchedulerActive(schedulerActive);
        }

        Integer schedulerType = (Integer) attributes.get("schedulerType");

        if (schedulerType != null) {
            setSchedulerType(schedulerType);
        }

        Date schedulerDate = (Date) attributes.get("schedulerDate");

        if (schedulerDate != null) {
            setSchedulerDate(schedulerDate);
        }
    }

    @Override
    public long getNewsletterId() {
        return _newsletterId;
    }

    @Override
    public void setNewsletterId(long newsletterId) {
        _newsletterId = newsletterId;
    }

    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _columnBitmask |= COMPANYID_COLUMN_BITMASK;

        if (!_setOriginalCompanyId) {
            _setOriginalCompanyId = true;

            _originalCompanyId = _companyId;
        }

        _companyId = companyId;
    }

    public long getOriginalCompanyId() {
        return _originalCompanyId;
    }

    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _name = name;
    }

    @Override
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    @Override
    public long getCategoryId() {
        return _categoryId;
    }

    @Override
    public void setCategoryId(long categoryId) {
        _categoryId = categoryId;
    }

    @Override
    public String getSubject() {
        if (_subject == null) {
            return StringPool.BLANK;
        } else {
            return _subject;
        }
    }

    @Override
    public String getSubject(Locale locale) {
        String languageId = LocaleUtil.toLanguageId(locale);

        return getSubject(languageId);
    }

    @Override
    public String getSubject(Locale locale, boolean useDefault) {
        String languageId = LocaleUtil.toLanguageId(locale);

        return getSubject(languageId, useDefault);
    }

    @Override
    public String getSubject(String languageId) {
        return LocalizationUtil.getLocalization(getSubject(), languageId);
    }

    @Override
    public String getSubject(String languageId, boolean useDefault) {
        return LocalizationUtil.getLocalization(getSubject(), languageId,
            useDefault);
    }

    @Override
    public String getSubjectCurrentLanguageId() {
        return _subjectCurrentLanguageId;
    }

    @JSON
    @Override
    public String getSubjectCurrentValue() {
        Locale locale = getLocale(_subjectCurrentLanguageId);

        return getSubject(locale);
    }

    @Override
    public Map<Locale, String> getSubjectMap() {
        return LocalizationUtil.getLocalizationMap(getSubject());
    }

    @Override
    public void setSubject(String subject) {
        _subject = subject;
    }

    @Override
    public void setSubject(String subject, Locale locale) {
        setSubject(subject, locale, LocaleUtil.getDefault());
    }

    @Override
    public void setSubject(String subject, Locale locale, Locale defaultLocale) {
        String languageId = LocaleUtil.toLanguageId(locale);
        String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

        if (Validator.isNotNull(subject)) {
            setSubject(LocalizationUtil.updateLocalization(getSubject(),
                    "Subject", subject, languageId, defaultLanguageId));
        } else {
            setSubject(LocalizationUtil.removeLocalization(getSubject(),
                    "Subject", languageId));
        }
    }

    @Override
    public void setSubjectCurrentLanguageId(String languageId) {
        _subjectCurrentLanguageId = languageId;
    }

    @Override
    public void setSubjectMap(Map<Locale, String> subjectMap) {
        setSubjectMap(subjectMap, LocaleUtil.getDefault());
    }

    @Override
    public void setSubjectMap(Map<Locale, String> subjectMap,
        Locale defaultLocale) {
        if (subjectMap == null) {
            return;
        }

        setSubject(LocalizationUtil.updateLocalization(subjectMap,
                getSubject(), "Subject", LocaleUtil.toLanguageId(defaultLocale)));
    }

    @Override
    public String getArticleId() {
        if (_articleId == null) {
            return StringPool.BLANK;
        } else {
            return _articleId;
        }
    }

    @Override
    public void setArticleId(String articleId) {
        _articleId = articleId;
    }

    @Override
    public long getArticleGroupId() {
        return _articleGroupId;
    }

    @Override
    public void setArticleGroupId(long articleGroupId) {
        _articleGroupId = articleGroupId;
    }

    @Override
    public boolean getSchedulerActive() {
        return _schedulerActive;
    }

    @Override
    public boolean isSchedulerActive() {
        return _schedulerActive;
    }

    @Override
    public void setSchedulerActive(boolean schedulerActive) {
        _schedulerActive = schedulerActive;
    }

    @Override
    public int getSchedulerType() {
        return _schedulerType;
    }

    @Override
    public void setSchedulerType(int schedulerType) {
        _schedulerType = schedulerType;
    }

    @Override
    public Date getSchedulerDate() {
        return _schedulerDate;
    }

    @Override
    public void setSchedulerDate(Date schedulerDate) {
        _schedulerDate = schedulerDate;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            Newsletter.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public String[] getAvailableLanguageIds() {
        Set<String> availableLanguageIds = new TreeSet<String>();

        Map<Locale, String> subjectMap = getSubjectMap();

        for (Map.Entry<Locale, String> entry : subjectMap.entrySet()) {
            Locale locale = entry.getKey();
            String value = entry.getValue();

            if (Validator.isNotNull(value)) {
                availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
            }
        }

        return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
    }

    @Override
    public String getDefaultLanguageId() {
        String xml = getSubject();

        if (xml == null) {
            return StringPool.BLANK;
        }

        return LocalizationUtil.getDefaultLanguageId(xml);
    }

    @Override
    public void prepareLocalizedFieldsForImport() throws LocaleException {
        prepareLocalizedFieldsForImport(null);
    }

    @Override
    @SuppressWarnings("unused")
    public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
        throws LocaleException {
        Locale defaultLocale = LocaleUtil.getDefault();

        String modelDefaultLanguageId = getDefaultLanguageId();

        String subject = getSubject(defaultLocale);

        if (Validator.isNull(subject)) {
            setSubject(getSubject(modelDefaultLanguageId), defaultLocale);
        } else {
            setSubject(getSubject(defaultLocale), defaultLocale, defaultLocale);
        }
    }

    @Override
    public Newsletter toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Newsletter) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        NewsletterImpl newsletterImpl = new NewsletterImpl();

        newsletterImpl.setNewsletterId(getNewsletterId());
        newsletterImpl.setCompanyId(getCompanyId());
        newsletterImpl.setGroupId(getGroupId());
        newsletterImpl.setCreateDate(getCreateDate());
        newsletterImpl.setModifiedDate(getModifiedDate());
        newsletterImpl.setName(getName());
        newsletterImpl.setDescription(getDescription());
        newsletterImpl.setCategoryId(getCategoryId());
        newsletterImpl.setSubject(getSubject());
        newsletterImpl.setArticleId(getArticleId());
        newsletterImpl.setArticleGroupId(getArticleGroupId());
        newsletterImpl.setSchedulerActive(getSchedulerActive());
        newsletterImpl.setSchedulerType(getSchedulerType());
        newsletterImpl.setSchedulerDate(getSchedulerDate());

        newsletterImpl.resetOriginalValues();

        return newsletterImpl;
    }

    @Override
    public int compareTo(Newsletter newsletter) {
        long primaryKey = newsletter.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Newsletter)) {
            return false;
        }

        Newsletter newsletter = (Newsletter) obj;

        long primaryKey = newsletter.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        NewsletterModelImpl newsletterModelImpl = this;

        newsletterModelImpl._originalCompanyId = newsletterModelImpl._companyId;

        newsletterModelImpl._setOriginalCompanyId = false;

        newsletterModelImpl._originalGroupId = newsletterModelImpl._groupId;

        newsletterModelImpl._setOriginalGroupId = false;

        newsletterModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Newsletter> toCacheModel() {
        NewsletterCacheModel newsletterCacheModel = new NewsletterCacheModel();

        newsletterCacheModel.newsletterId = getNewsletterId();

        newsletterCacheModel.companyId = getCompanyId();

        newsletterCacheModel.groupId = getGroupId();

        Date createDate = getCreateDate();

        if (createDate != null) {
            newsletterCacheModel.createDate = createDate.getTime();
        } else {
            newsletterCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            newsletterCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            newsletterCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        newsletterCacheModel.name = getName();

        String name = newsletterCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            newsletterCacheModel.name = null;
        }

        newsletterCacheModel.description = getDescription();

        String description = newsletterCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            newsletterCacheModel.description = null;
        }

        newsletterCacheModel.categoryId = getCategoryId();

        newsletterCacheModel.subject = getSubject();

        String subject = newsletterCacheModel.subject;

        if ((subject != null) && (subject.length() == 0)) {
            newsletterCacheModel.subject = null;
        }

        newsletterCacheModel.articleId = getArticleId();

        String articleId = newsletterCacheModel.articleId;

        if ((articleId != null) && (articleId.length() == 0)) {
            newsletterCacheModel.articleId = null;
        }

        newsletterCacheModel.articleGroupId = getArticleGroupId();

        newsletterCacheModel.schedulerActive = getSchedulerActive();

        newsletterCacheModel.schedulerType = getSchedulerType();

        Date schedulerDate = getSchedulerDate();

        if (schedulerDate != null) {
            newsletterCacheModel.schedulerDate = schedulerDate.getTime();
        } else {
            newsletterCacheModel.schedulerDate = Long.MIN_VALUE;
        }

        return newsletterCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(29);

        sb.append("{newsletterId=");
        sb.append(getNewsletterId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append(", categoryId=");
        sb.append(getCategoryId());
        sb.append(", subject=");
        sb.append(getSubject());
        sb.append(", articleId=");
        sb.append(getArticleId());
        sb.append(", articleGroupId=");
        sb.append(getArticleGroupId());
        sb.append(", schedulerActive=");
        sb.append(getSchedulerActive());
        sb.append(", schedulerType=");
        sb.append(getSchedulerType());
        sb.append(", schedulerDate=");
        sb.append(getSchedulerDate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(46);

        sb.append("<model><model-name>");
        sb.append("net.zylk.liferay.portal.model.Newsletter");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>newsletterId</column-name><column-value><![CDATA[");
        sb.append(getNewsletterId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>categoryId</column-name><column-value><![CDATA[");
        sb.append(getCategoryId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>subject</column-name><column-value><![CDATA[");
        sb.append(getSubject());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>articleId</column-name><column-value><![CDATA[");
        sb.append(getArticleId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>articleGroupId</column-name><column-value><![CDATA[");
        sb.append(getArticleGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>schedulerActive</column-name><column-value><![CDATA[");
        sb.append(getSchedulerActive());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>schedulerType</column-name><column-value><![CDATA[");
        sb.append(getSchedulerType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>schedulerDate</column-name><column-value><![CDATA[");
        sb.append(getSchedulerDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
